# -*- coding: utf-8 -*-
"""AIFINALPROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1odB1DFyI2DmDyxZQ1MGM8V8UmomanBnc
"""

!pip install google-cloud-speech

!pip install --upgrade google-cloud-speech

!pip install --upgrade pip

!pip install pytube

!pip install moviepy

from pytube import YouTube
from langchain.document_loaders.generic import Document
from langchain.document_loaders.blob_loaders import BlobLoader
from moviepy.editor import AudioFileClip  # Change the import
from langchain.document_loaders.blob_loaders import FileSystemBlobLoader
import os

#this part takes the link and downloads it and prints the path
url = "https://www.youtube.com/watch?v=-qReeg7imGc&t=1s"
save_dir = "/content/drive/My Drive/Colab Notebooks/Prompt Engineering/LangChain Chat with Your Data/"

# Download the video using Pytube
yt = YouTube(url)
video = yt.streams.filter(file_extension='mp4', only_audio=True).first()  # Specify file extension
video.download(output_path=save_dir)

# Print the downloaded file path
downloaded_file_path = os.path.join(save_dir, f"{yt.title}.mp4")
print("Downloaded file path:", downloaded_file_path)

#This part coverts it into an audio
# Convert the downloaded mp4 file to mp3 using AudioFileClip
audio_clip = AudioFileClip(downloaded_file_path)  # Specify fps directly
audio_clip.write_audiofile(os.path.join(save_dir, f"{yt.title}.mp3"))

mp3_file_path = os.path.join(save_dir, f"{yt.title}.mp3")

import os
from google.colab import drive
drive.mount('/content/drive')

key_path= os.path.abspath(r"/content/drive/MyDrive/ai-final-project-406013-de6f0227d24d.json")
# Set the environment variable
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = key_path

# Specify the path to the audio file
audio_file_path =mp3_file_path

from google.cloud import speech_v1p1beta1 as speech
from google.cloud import storage

# Upload the audio file to Google Cloud Storage
bucket_name = "ai-final-project-bucket"
gcs_file_name = f"{yt.title}.mp3"  # Use the desired file name in GCS
gcs_uri = f"gs://{bucket_name}/{gcs_file_name}"

client = storage.Client()
bucket = client.bucket(bucket_name)
blob = bucket.blob(gcs_file_name)
blob.upload_from_filename(audio_file_path)

!pip install assemblyai

import assemblyai as aai
import os

aai.settings.api_key = f"2e1a0f6f18d64f81af1402321dc51367"

transcriber = aai.Transcriber()

audio_url = (
    "https://storage.googleapis.com/ai-final-project-bucket/7%20AI%20Tools%20That%20WILL%20Make%20You%20RICH.mp3"
)

config = aai.TranscriptionConfig(speaker_labels=True)

transcript = transcriber.transcribe(audio_url, config)

print(transcript.text)

for utterance in transcript.utterances:
    print(f"Speaker {utterance.speaker}: {utterance.text}")

#summarizing provides a condensed summary of the entire audio content
config = aai.TranscriptionConfig(
  summarization=True,
  summary_model=aai.SummarizationModel.informative,
  summary_type=aai.SummarizationType.bullets
)

transcript = aai.Transcriber().transcribe(audio_url, config)

print(transcript.summary)

#Using auto chapters model identifies and segments the audio into distinct chapters based on topic changes.
config = aai.TranscriptionConfig(auto_chapters=True)

transcript = aai.Transcriber().transcribe(audio_url, config)

for chapter in transcript.chapters:
  print(f"{chapter.start}-{chapter.end}: {chapter.headline}")

#Finding the sentiment of the audio
config = aai.TranscriptionConfig(sentiment_analysis=True)

transcript = aai.Transcriber().transcribe(audio_url, config)

for sentiment_result in transcript.sentiment_analysis:
    print(sentiment_result.text)
    print(sentiment_result.sentiment)  # POSITIVE, NEUTRAL, or NEGATIVE
    print(sentiment_result.confidence)
    print(f"Timestamp: {sentiment_result.start} - {sentiment_result.end}")